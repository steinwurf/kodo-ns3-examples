## -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

import os

def build(bld):

    # Find the kodo-c shared library in the local "lib" folder
    kodoc_path = os.path.join(bld.path.abspath(), 'lib')
    bld.read_shlib('kodoc', paths=[kodoc_path])

    def set_properties(obj):
        # Add the local 'include' folder to the normal ns-3 includes
        # The kodo-cpp headers are installed in the 'include' folder
        obj.includes = ['#', 'include']
        # shared_ptr is used in kodo-cpp so we need to add the -std=c++11 flag
        obj.cxxflags = ['-std=c++11']
        # The example uses the specified ns-3 modules and the kodo-c shared lib
        obj.use = obj.ns3_module_dependencies + ['kodoc']
        # Set the rpath to the kodo-c shared lib, so the system can find it
        # when running the example binary
        obj.rpath = [kodoc_path]
        obj.install_path = None

    obj = bld.create_ns3_program('kodo-recoder',
                                 ['core', 'applications', 'point-to-point',
                                  'point-to-point-layout', 'internet'])
    obj.source = 'kodo-recoder.cc'
    set_properties(obj)

    obj = bld.create_ns3_program('kodo-wifi-broadcast',
                                 ['core', 'applications', 'point-to-point',
                                  'point-to-point-layout', 'internet', 'wifi'])
    obj.source = 'kodo-wifi-broadcast.cc'
    set_properties(obj)

    obj = bld.create_ns3_program('kodo-wired-broadcast',
                                 ['core', 'applications', 'point-to-point',
                                  'point-to-point-layout', 'internet'])
    obj.source = 'kodo-wired-broadcast.cc'
    set_properties(obj)


