#! /usr/bin/env python
# encoding: utf-8

# Example of how to run Waf if you want it to download all dependencies
#
# ./waf configure --bundle=ALL --bundle-path=/home/edwin/bundle_dependencies
#                 --ns3-path=/home/edwin/blabla --ns3-type=debug
#

import os

APPNAME = 'adhoc_simulations'
VERSION = '1.0.0'

def recurse_helper(ctx, name):
    if not ctx.has_dependency_path(name):
        ctx.fatal('Load a tool to find %s as system dependency' % name)
    else:
        p = ctx.dependency_path(name)
        ctx.recurse(p)


ns3_lib_name = "ns3-dev-%s-%s"
""" The name of a ns3 shared library """

def options(opt):

    opt.load('toolchain_cxx')
    opt.load('dependency_bundle')

    import waflib.extras.dependency_bundle as bundle
    import waflib.extras.dependency_resolve as resolve

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'gtest',
            git_repository = 'git://github.com/steinwurf/external-gtest.git',
            major_version = 1))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'boost',
            git_repository = 'git://github.com/steinwurf/external-boost.git',
            major_version = 1))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'sak',
            git_repository = 'git://github.com/steinwurf/sak.git',
            major_version = 2))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'fifi',
            git_repository = 'git://github.com/steinwurf/fifi.git',
            major_version = 2))

    bundle.add_dependency(opt,
        resolve.ResolveGitMajorVersion(
            name = 'kodo',
            git_repository = 'git://github.com/steinwurf/kodo.git',
            major_version = 2))


    opt.add_option('--run',
                   help=('Run a locally built program; argument can be a program name,'
                         ' or a command starting with the program name.'),
                   type="string", default='', dest='run')

    opt.add_option('--ns3-path',
                   help='Install path to ns3',
                   action="store", type="string", default=None,
                   dest='ns3_path')

    opt.add_option('--ns3-type',
                   help='The build type used when building ns3 [debug|release]',
                   action="store", type="string", default='debug',
                   dest='ns3_type')

def configure(conf):

    if not conf.options.ns3_path:
        conf.fatal('Please specify a path to ns3')

    ns3_path = os.path.abspath(os.path.expanduser(conf.options.ns3_path))

    if not os.path.isdir(ns3_path):
        conf.fatal('The specified ns3 path "%s" is not a valid '
                   'directory' % ns3_path)

    ns3_build = os.path.join(ns3_path, 'build')
    if not os.path.isdir(ns3_build):
        conf.fatal('Could not find the ns3 build directory '
                   'in "%s"' % ns3_build)

    ns3_type = conf.options.ns3_type

    if not ns3_type:
        conf.fatal('You must specify the build type')

    conf.env['NS3_BUILD'] = [ns3_build]
    conf.env['NS3_TYPE'] = ns3_type

    conf.load('toolchain_cxx')
    conf.load('dependency_bundle')

    recurse_helper(conf, 'boost')
    recurse_helper(conf, 'gtest')
    recurse_helper(conf, 'sak')
    recurse_helper(conf, 'fifi')
    recurse_helper(conf, 'kodo')

def build(bld):

    bld.load('dependency_bundle')

    recurse_helper(bld, 'boost')
    recurse_helper(bld, 'gtest')
    recurse_helper(bld, 'sak')
    recurse_helper(bld, 'fifi')
    recurse_helper(bld, 'kodo')

    ns3_build = bld.env['NS3_BUILD']
    ns3_type = bld.env['NS3_TYPE']

    ns3_lib_dir = bld.root.find_dir(ns3_build)
    ns3_libs = ns3_lib_dir.ant_glob('*.so')

    # Extract the library names (todo: make it nicer)
    ns3_libs = [str(lib).split('/')[-1] for lib in ns3_libs]
    ns3_libs = [lib[3:] for lib in ns3_libs]
    ns3_libs = [lib[:-3] for lib in ns3_libs]

    bld.program(source = ['adhoc.cc', 'pep-wifi-net-device.cc', 'code-header.cc'],
                target = 'adhoc',
                libpath = ns3_build,
                rpath = ns3_build,
                includes = ns3_build,
                lib = ns3_libs,
                cxxflags = '-g',
                features = 'cxx cxxprogram',
                use = ['kodo_includes', 'boost_includes',
                       'fifi_includes', 'sak_includes'])




